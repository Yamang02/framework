<?xml version="1.0" encoding="UTF-8"?>

<!-- Mapper 설정 파일임을 선언 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="memberMapper">
	<!--
		중복되는 쿼리 내용을 재사용하기 위한 SQL조각으로 사용하려는 요소보다 항상 위에 있어야 한다.
	-->
	<sql id="selectMemberSql">
		SELECT
		NO,
		ID,
		PASSWORD,
		ROLE,
		NAME,
		PHONE,
		EMAIL,
		ADDRESS,
		HOBBY,
		STATUS,
		ENROLL_DATE,
		MODIFY_DATE
		FROM
		MEMBER
	</sql>

	<resultMap id="memberResultMap" type="Member">
		<!-- 조회 결과의 기본키 컬럼을 매핑한다. -->
		<id property="no" column="NO" />
		<!-- 조회 결과의 일반 컬럼을 매핑한다. -->
		<id property="id" column="ID" />
		<id property="password" column="PASSWORD" />
		<id property="role" column="ROLE" />
		<id property="name" column="NAME" />
		<id property="phone" column="PHONE" />
		<id property="email" column="EMAIL" />
		<id property="address" column="ADDRESS" />
		<id property="hobby" column="HOBBY" />
		<id property="status" column="STATUS" />
		<id property="enrollDate" column="ENROLL_DATE" />
		<id property="modifyDate" column="MODIFY_DATE" />
	</resultMap>

	<select id="selectCount" resultType="_int">
		SELECT COUNT(*) FROM MEMBER
	</select>

	<!-- 쿼리문의 수행 결과가 담긴 ResultSet은 resultType의 인스턴스에 자동으로 mapping 되어 리턴한다. 단,
		조회된 결과의 컬럼명과와 자바 클래스의 필드명을 동일하게 만들어야 자동으로 mapping 된다. 대소문자 구분은 하지 않는다. -->
	<!-- 1) 쿼리문의 별칭을 사용하여 "AS 별칭"으로 조회되는 컬럼명을 변경한다. -->
	<!--
		SELECT
		NO,
		ID,
		PASSWORD,
		ROLE,
		NAME,
		PHONE,
		EMAIL,
		ADDRESS,
		HOBBY,
		STATUS,
		ENROLL_DATE,
		MODIFY_DATE
		FROM
		MEMBER
		WHERE
		STATUS = 'Y' -->

	<select id="selectAll" resultMap="memberResultMap">
		<!-- 2) resultMap을 이용해서 명시적으로 컬럼명과 필드명을 mapping 시켜준다.
			SELECT
			NO,
			ID,
			PASSWORD,
			ROLE,
			NAME,
			PHONE,
			EMAIL,
			ADDRESS,
			HOBBY,
			STATUS,
			ENROLL_DATE,
			MODIFY_DATE
			FROM
			MEMBER
			WHERE
			STATUS = 'Y'
		-->
		<include refid="selectMemberSql" />
		WHERE
		STATUS = 'Y'
	</select>

	<!--
		외부에서 매개변수로 받는 값이 있으면 해당하는 파라미터의 타입을 지정해야 한다. (parameterType="String")
		외부에서 매개변수로 받은 값은 #{변수명}으로 값을 가져온다.
	-->

	<select id="selectMemberById" parameterType="string"
		resultMap="memberResultMap">
		<include refid="selectMemberSql" />
		WHERE
		ID= #{ id }
		AND STATUS = 'Y'
	</select>


	<!-- 
		데이터를 insert 후 PK 값을 받아오기 위해서는 useGeneratedKeys, keyColumn, keyProperty 속성을 추가해야 한다.
			- useGeneratedKeys : insert 후에 PK 값을 받아올 수 있도록 허용하는 속성
			- keyColumn : PK에 해당하는 컬럼을 지정하는 속성
			- keyProperty : PK 값이 담길 파라미터 인스턴스의 필드명을 지정하는 속성
	 -->
	<insert id="insertMember" parameterType="Member" useGeneratedKeys="true" keyColumn="No" keyProperty="no">
	INSERT INTO MEMBER (
		NO,
		ID,
		PASSWORD,
		ROLE,
		NAME,
		PHONE,
		EMAIL,
		ADDRESS,
		HOBBY,
		STATUS,
		ENROLL_DATE,
		MODIFY_DATE
		)
	VALUES (
		SEQ_UNO.NEXTVAL,
		#{id},
		#{password},
		DEFAULT,
		#{name},
		#{phone},
		#{email},
		#{address},
		#{hobby},
		DEFAULT,
		DEFAULT,
		DEFAULT
		)
	</insert>

	<update id="updateMember" parameterType="Member">
		UPDATE 
			MEMBER 
		SET 
			NAME= #{name},
			PASSWORD= #{password},
			PHONE= #{phone},
			EMAIL= #{email},
			ADDRESS= #{address},
			HOBBY= #{hobby},
			MODIFY_DATE= SYSDATE
		WHERE
			NO= #{no}
	</update>

	<delete id="deleteMember" parameterType="string">
			
		DELETE FROM MEMBER WHERE ID = #{id}
	
	</delete>


</mapper>